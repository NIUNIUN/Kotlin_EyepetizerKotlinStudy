apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.qinglianyun.eyepetizerkotlinstudy"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner..AndroidJUnitRunner"

        ndk {

            //APP的build.gradle设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'x86'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
                /**
                 * room.schemaLocation: 配置并启用将数据库架构导出到给定目录中的 JSON 文件的功能。
                 * room.incremetal: 启用 Gradle 增量注解处理器。
                 * room.expandProjection: 配置 Room 以重写查询，使其顶部星形投影在展开后仅包含 DAO 方法返回类型中定义的列。
                 */
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            multiDexEnabled true
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':base')

    // 协程
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3'

    /**
     * 当前库
     * implementation：只能在当前module使用，不能被依赖当前module的module使用
     * api：当前module可以使用，依赖当前module的module可以使用
     *
     * implementation和api是用来作用整个依赖库，而不是指依赖的库里面的依赖库。
     */

    // 视频播放器
//    implementation 'com.shuyu:GSYVideoPlayer:6.0.3'
//    implementation 'com.shuyu:gsyVideoPlayer-kotlin:6.0.3'
    implementation 'com.shuyu:gsyVideoPlayer-java:6.0.3'

    implementation 'com.android.support:multidex:1.0.3'

    //根据你的需求ijk模式的so
    implementation 'com.shuyu:gsyVideoPlayer-armv7a:6.0.3'
//    implementation 'com.shuyu:gsyVideoPlayer-arm64:6.0.3'
//    implementation 'com.shuyu:gsyVideoPlayer-x64:6.0.3'  //（可丢弃，调试可以留着，正是打包去除）
//    implementation 'com.shuyu:gsyVideoPlayer-x86:6.0.3' //（可丢弃）

    // Room库
    def dependencie = rootProject.ext.dependencies
    implementation dependencie.room_runtime
    kapt dependencie.room_compile
//    annotationProcessor "android.arch.persistence.room:compiler:$room_version" // use kapt for Kotlin
    testImplementation dependencie.room_test_hepler
    implementation dependencie.room_rxjava2

    // Paging库
    implementation dependencie.paging_runtime
    testImplementation dependencie.paging_common
    implementation dependencie.paging_rxjava2

    // Lifecycle库
    implementation dependencie.lifecycle_extension

    // WorkManager库
    def work_version = "1.0.0"
    // Kotlin + coroutines
    implementation "android.arch.work:work-runtime-ktx:$work_version"
    // optional - RxJava2 support
    implementation "android.arch.work:work-rxjava2:$work_version"
    // optional - Test helpers
    androidTestImplementation "android.arch.work:work-testing:$work_version"

}
